# FIRST: make sure to have unfolded data, derived / ancestral state is defined
# recommendations: if you have outgroup or ancient population, extract new SNPs, by excluding monomorphic SNPs in ancient population.
# use for instance vcftools count/ freq for this compare counts and keep snps that are monomorphic in ancient population
# usecontruct consensus sequence using ancient pop

vcftools --vcf  freebayes.SNPs.filtered.final.recode.vcf --keep ../pop/norway --counts2 --out norway
vcftools --vcf  freebayes.SNPs.filtered.final.recode.vcf --keep ../pop/ARD --counts2 --out ARD 

## start R
R
ard_c=read.table("ARD.frq.count",sep="\t",header=T,fill=T,row.names=NULL)
norway_c=read.table("norway.frq.count",sep="\t",header=T,fill=T,row.names=NULL)

# extract snps which freq = 0 in ancient population
anc_tmp=norway_c[ard_c[,6]==0,]

tmp1=na.omit(anc_tmp)
tmp2=tmp1[tmp1[,6]>0,]

write.table(tmp2,"keep",row.names=F,quote=F,sep="\t")
## end R

## use first two columns to extract snps, edit file
awk '{print $1"\t"$2}' keep >keep2

vcftools --vcf  freebayes.SNPs.filtered.final.recode.vcf --keep ../pop/all --positions keep2 --recode --out unique

# construct consesnus fasta sequence
#cat ~/data/symphodus_melops.fasta | vcf-consensus ARD_only.recode.vcf.gz -s ARD15 > ARD.consensus.fasta

#  use script to convert vcf to dadi SFS
#  https://groups.google.com/group/dadi-user/attach/15ae6994986666dc/convert_vcf_to_dadi_input.pl?part=0.1&authuser=0&view=1
#
# requires a vcffile, genomefastafile and a list file decribing the samples, 2 columns

scp unique.recode.vcf dadi/
cd ~data/bam_fixrg_dedup/freebayes/dadi

# convert to input for IBS estimation

# 2D analysis to dadi
perl convert_vcf_2_dadi.pl ../ARD.consensus.fasta unique.recode.vcf list5


# Start dadi

import numpy 
import dadi
import pylab



################ 2D
# load  data
print 'Reading data'
dd = dadi.Misc.make_data_dict('all.data')
all = dadi.Spectrum.from_data_dict(dd, ['South','West','Atlantic'], [66,48,16], polarized=True)
# end loading data
################

################ 1D
S = all.marginalize([1,2])
W = all.marginalize([0,2])

################ 2D
data = all.marginalize([2])


################
### Calculate descriptive statistics
ns = data.sample_sizes
S = data.S()
print "Segregating sites:",S
Fst = data.Fst()
print "FST:",Fst
# end calculate descriptive statistics
################

data40=data.project([40,40])

pylab.figure()
dadi.Plotting.plot_single_2d_sfs(data40,vmin=1, vmax=100000)
pylab.savefig('Norway.png', dpi=100)
pylab.close()

# export data for scripts
data40.to_file('ALL_spectrum_from_dadi.v6.fs')
S.to_file('SOUTH_spectrum_from_dadi.v6.fs')
W.to_file('WEST_spectrum_from_dadi.v6.fs')


##### example of 1 single run, bottleneck South
#  nuB: Ratio of bottleneck population size to ancient pop size
#  nuF: Ratio of contemporary to ancient pop size
#  TB: Length of bottleneck (in units of 2*Na generations) 
#  TF: Time since bottleneck recovery (in units of 2*Na generations) 

ns=S.sample_sizes
params=[0.1,1,1,3]
func = dadi.Demographics1D.three_epoch
func_ex = dadi.Numerics.make_extrap_func(func)
upper_bound = [1,10,10,10]
lower_bound = [0.01,0.01,0.01,0.01] 
p0 = dadi.Misc.perturb_params(params, fold=1, lower_bound = lower_bound, upper_bound = upper_bound)
popt = dadi.Inference.optimize(p0,S, func_ex, pts_l, lower_bound=lower_bound,upper_bound=upper_bound,verbose=len(p0),maxiter=20)

model = func_ex(params, ns, pts_l)
theta = dadi.Inference.optimal_sfs_scaling(model, S)
Ne=theta/(4*10e-8*550000000)
TB=Ne*2*Ne*popt[2]
TF=Ne*2*Ne*popt[3]

print 'Optimized parameters', repr(popt)
print 'Effective ancient population size', Ne
print 'Time since recovery', TB
print 'Length of bottleneck', TF

dadi.Plotting.plot_1d_comp_multinom(model,S)
pylab.savefig('Skagerak_growth.1D.png', dpi=100)
plt.close("all")


#### costum model
def bottleneck_split_bottleneck((nuAb, nu1B, nu1F, nu2B, nu2F, TAb, Ts, T1b, T2b), (n1,n2), pts):
    """
    Model with bottleneck in the ancestral population, then split
    
    nuAb: The ancestral population size after bottleneck. (Its initial size is defined to be 1.)
    nu1B: Size of pop1 after split
    nu1F: The final size for pop1 (after the bottleneck in pop1)
    nu2B: Size of pop2 after split
    nu2F: The final size for pop2 (after the bottleneck in pop2)
    TAb: Time of the ancestral population bottleneck. 
    Ts: Time of the split
    T1b: Time of bottleneck in pop1
    T2b: Time of bottleneck in pop2

    n1,n2: Size of fs to generate.
    pts: Number of points to use in grid for evaluation.
    """
    # Define the grid we'll use
    xx = yy = dadi.Numerics.default_grid(pts)

    # phi for the equilibrium ancestral population
    phi = dadi.PhiManip.phi_1D(xx)

    # Now do the population botleneck event.
    phi = dadi.Integration.one_pop(phi, xx, TAb, nuAb)

    #do the the split.
    phi = dadi.PhiManip.phi_1D_to_2D(xx, phi)
    phi = dadi.PhiManip.phi_1D_to_2D(xx, phi, Ts, nu1=nu1B, nu2=nu2B)

    # the bottleneck in pop1.
    phi = dadi.Integration.two_pops(phi, xx, T1b, nu1=nu1F, nu2=nu2B)

    # the bottleneck in pop2.
    phi = dadi.Integration.two_pops(phi, xx, T2b, nu1=nu1F, nu2=nu2F)

    # Finally, calculate the spectrum.
    fs = dadi.Spectrum.from_phi(phi, (n1,n2), (xx,yy))
    return fs




#### plot specific model
# plot resuduals and fitted models
import sys
import os
import matplotlib
matplotlib.use('Agg')
import numpy
import dadi
import pylab
from datetime import datetime
from numpy import array
import dadi_models


data = dadi.Spectrum.from_file('INNO_Q30DP6-30A2_mm7hwe0001_noInv_877k_thin10k_46k_folded.fs')
# give params of your best model
params=array([5.1049,0.7107,25.8197,14.8359,13.2433,0.2141])
pts = [30,40,50]
ns = data.sample_sizes
# specify your model
func = dadi_models.SC
func_ex = dadi.Numerics.make_extrap_log_func(func)
#func_ex = dadi.Numerics.make_extrap_func(func)

model = func_ex(params, ns, pts)

pylab.figure()
dadi.Plotting.plot_2d_comp_multinom(model, data, vmin=1, resid_range=20)
pylab.savefig('cod.png', dpi=100)
pylab.show()
